/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import classes.Employee;
import classes.Payslip;
import classes.TimeAttendance;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Rosh
 */
public class FrmHRStaffHome extends javax.swing.JFrame {
    
    private Payslip payslip;
    private Employee employee;
    private TimeAttendance time;

    /**
     * Creates new form FrmAdminHome
     */
    public FrmHRStaffHome() {
        initComponents();
        setTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblLogout = new javax.swing.JLabel();
        JTabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnEnter = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnDeleteEmployee = new javax.swing.JButton();
        btnUpdateEmployee = new javax.swing.JButton();
        btnAddStudent = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblAttendance = new javax.swing.JTable();
        txtSearch2 = new javax.swing.JTextField();
        lblTitle4 = new javax.swing.JLabel();
        btnEnter2 = new javax.swing.JButton();
        cbSelectDate = new javax.swing.JComboBox<>();
        lblTitle6 = new javax.swing.JLabel();
        btnARefresh = new javax.swing.JButton();
        btnAUpdate = new javax.swing.JButton();
        btnADelete = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblCredit = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblLeave = new javax.swing.JTable();
        btnRRefresh = new javax.swing.JButton();
        txtRSearch = new javax.swing.JTextField();
        lblTitle2 = new javax.swing.JLabel();
        btnRSearch = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        cbREmployee = new javax.swing.JComboBox<>();
        cbRStartDate = new javax.swing.JComboBox<>();
        cbREndDate = new javax.swing.JComboBox<>();
        txtREmployee = new javax.swing.JLabel();
        txtRStartDate = new javax.swing.JLabel();
        txtREndDate = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblReport = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                loadEmployee(evt);
                loadLeave(evt);
                loadCredits(evt);
                loadAttendance(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 245, 239));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(48, 36, 58));
        jLabel1.setText("Welcome");

        lblUser.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblUser.setForeground(new java.awt.Color(48, 36, 58));
        lblUser.setText("Manuel,");

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(255, 204, 179));

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Anna\\OneDrive\\Documents\\NetBeansProjects\\MotorPHPayrollSystem\\src\\main\\java\\icons\\MotorPHLogo.png")); // NOI18N

        lblLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(48, 36, 58));
        lblLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogout.setIcon(new javax.swing.ImageIcon("C:\\Users\\Anna\\Downloads\\icons8-logout-30.png")); // NOI18N
        lblLogout.setText("Log out");
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Logout(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jPanel2.setBackground(new java.awt.Color(255, 204, 179));

        jPanel6.setBackground(new java.awt.Color(255, 245, 239));

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployee);
        if (tblEmployee.getColumnModel().getColumnCount() > 0) {
            tblEmployee.getColumnModel().getColumn(0).setResizable(false);
            tblEmployee.getColumnModel().getColumn(1).setResizable(false);
            tblEmployee.getColumnModel().getColumn(2).setResizable(false);
            tblEmployee.getColumnModel().getColumn(3).setResizable(false);
            tblEmployee.getColumnModel().getColumn(4).setResizable(false);
            tblEmployee.getColumnModel().getColumn(5).setResizable(false);
            tblEmployee.getColumnModel().getColumn(6).setResizable(false);
        }

        txtSearch.setToolTipText("");
        txtSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(254, 142, 76), 1, true));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        lblTitle.setText("Enter EmployeeID");

        btnEnter.setBackground(new java.awt.Color(254, 142, 76));
        btnEnter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEnter.setForeground(new java.awt.Color(255, 255, 255));
        btnEnter.setText("Search");
        btnEnter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(254, 142, 76), 0));
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eEnterSearch(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(254, 142, 76));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("REFRESH");
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eRefreshRecord(evt);
            }
        });

        btnDeleteEmployee.setBackground(new java.awt.Color(254, 142, 76));
        btnDeleteEmployee.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteEmployee.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteEmployee.setText("DELETE");
        btnDeleteEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eDeleteRecord(evt);
            }
        });

        btnUpdateEmployee.setBackground(new java.awt.Color(254, 142, 76));
        btnUpdateEmployee.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdateEmployee.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateEmployee.setText("UPDATE");
        btnUpdateEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eUpdateRecord(evt);
            }
        });

        btnAddStudent.setBackground(new java.awt.Color(254, 142, 76));
        btnAddStudent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddStudent.setForeground(new java.awt.Color(255, 255, 255));
        btnAddStudent.setText("ADD");
        btnAddStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eAddRecord(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(btnAddStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnUpdateEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnDeleteEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnter))
                .addGap(0, 0, 0)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(btnDeleteEmployee)
                    .addComponent(btnUpdateEmployee)
                    .addComponent(btnAddStudent))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        JTabbedPane.addTab("Employee", jPanel2);

        jPanel10.setBackground(new java.awt.Color(255, 204, 179));

        jPanel22.setBackground(new java.awt.Color(255, 245, 239));

        tblAttendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblAttendance);
        if (tblAttendance.getColumnModel().getColumnCount() > 0) {
            tblAttendance.getColumnModel().getColumn(0).setResizable(false);
            tblAttendance.getColumnModel().getColumn(1).setResizable(false);
            tblAttendance.getColumnModel().getColumn(2).setResizable(false);
            tblAttendance.getColumnModel().getColumn(3).setResizable(false);
            tblAttendance.getColumnModel().getColumn(4).setResizable(false);
            tblAttendance.getColumnModel().getColumn(5).setResizable(false);
            tblAttendance.getColumnModel().getColumn(6).setResizable(false);
        }

        txtSearch2.setToolTipText("");
        txtSearch2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(254, 142, 76), 1, true));

        lblTitle4.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        lblTitle4.setText("Enter EmployeeID");

        btnEnter2.setBackground(new java.awt.Color(254, 142, 76));
        btnEnter2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEnter2.setForeground(new java.awt.Color(255, 255, 255));
        btnEnter2.setText("Search");
        btnEnter2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(254, 142, 76), 0));
        btnEnter2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aEnterSearch(evt);
            }
        });

        cbSelectDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "September", "October", "November", "December" }));

        lblTitle6.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        lblTitle6.setText("Show data for:");

        btnARefresh.setBackground(new java.awt.Color(254, 142, 76));
        btnARefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnARefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnARefresh.setText("Refresh");
        btnARefresh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(254, 142, 76), 0));
        btnARefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aRefreshAttendance(evt);
            }
        });

        btnAUpdate.setBackground(new java.awt.Color(254, 142, 76));
        btnAUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnAUpdate.setText("Update");
        btnAUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(254, 142, 76), 0));
        btnAUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aUpdateAttendance(evt);
            }
        });

        btnADelete.setBackground(new java.awt.Color(254, 142, 76));
        btnADelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnADelete.setForeground(new java.awt.Color(255, 255, 255));
        btnADelete.setText("Delete");
        btnADelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(254, 142, 76), 0));
        btnADelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aDeleteAttendance(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSelectDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle6))
                .addGap(28, 28, 28)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(lblTitle4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnter2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(btnARefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnADelete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnter2)
                    .addComponent(cbSelectDate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnARefresh)
                    .addComponent(btnAUpdate)
                    .addComponent(btnADelete))
                .addGap(2, 2, 2)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle4)
                    .addComponent(lblTitle6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );

        JTabbedPane.addTab("Attendance", jPanel10);

        jPanel11.setBackground(new java.awt.Color(255, 204, 179));

        jPanel23.setBackground(new java.awt.Color(255, 245, 239));

        tblCredit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tblCredit);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Leave Balance");

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7)
                .addContainerGap())
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(255, 245, 239));

        btnApprove.setBackground(new java.awt.Color(254, 142, 76));
        btnApprove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setText("Approve");
        btnApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rApproveRequest(evt);
            }
        });

        btnReject.setBackground(new java.awt.Color(254, 142, 76));
        btnReject.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setText("Reject");
        btnReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rRejectRequest(evt);
            }
        });

        tblLeave.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblLeave);
        if (tblLeave.getColumnModel().getColumnCount() > 0) {
            tblLeave.getColumnModel().getColumn(0).setResizable(false);
            tblLeave.getColumnModel().getColumn(1).setResizable(false);
            tblLeave.getColumnModel().getColumn(2).setResizable(false);
            tblLeave.getColumnModel().getColumn(3).setResizable(false);
            tblLeave.getColumnModel().getColumn(4).setResizable(false);
            tblLeave.getColumnModel().getColumn(5).setResizable(false);
            tblLeave.getColumnModel().getColumn(6).setResizable(false);
        }

        btnRRefresh.setBackground(new java.awt.Color(254, 142, 76));
        btnRRefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRRefresh.setText("Refresh");
        btnRRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rRefreshRequest(evt);
            }
        });

        txtRSearch.setToolTipText("");
        txtRSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(254, 142, 76), 1, true));

        lblTitle2.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        lblTitle2.setText("Enter request status:");

        btnRSearch.setBackground(new java.awt.Color(254, 142, 76));
        btnRSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnRSearch.setText("Search");
        btnRSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rEnterSearch(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addGap(31, 31, 31)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtRSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle2)
                    .addComponent(btnRSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblTitle2)
                        .addGap(0, 0, 0)
                        .addComponent(txtRSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        JTabbedPane.addTab("Leave", jPanel11);

        jPanel16.setBackground(new java.awt.Color(255, 204, 179));

        jPanel19.setBackground(new java.awt.Color(255, 245, 239));

        jPanel12.setBackground(new java.awt.Color(255, 245, 239));

        cbREmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "All employees" }));

        cbRStartDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "2022-09-01", "2022-10-01", "2022-11-01", "2022-12-01" }));

        cbREndDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "2022-09-30", "2022-10-31", "2022-11-30", "2022-12-31" }));

        txtREmployee.setText("Employee(s):");

        txtRStartDate.setText("Start Date:");

        txtREndDate.setText("End Date:");

        btnSubmit.setBackground(new java.awt.Color(254, 142, 76));
        btnSubmit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("Submit");
        btnSubmit.setBorder(null);
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthlyReportGenerate(evt);
            }
        });

        btnPrint.setBackground(new java.awt.Color(254, 142, 76));
        btnPrint.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("PRINT");
        btnPrint.setBorder(null);
        btnPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthlyReportPrint(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtREmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbREmployee, 0, 130, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtRStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbRStartDate, 0, 100, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtREndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbREndDate, 0, 100, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtREmployee)
                    .addComponent(txtRStartDate)
                    .addComponent(txtREndDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbREmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbRStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbREndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(255, 245, 239));

        jScrollPane3.setBackground(new java.awt.Color(255, 245, 239));

        tblReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tblReport);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Monthly Summary Report");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        JTabbedPane.addTab("Report", jPanel16);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JTabbedPane)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadEmployee(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loadEmployee
        refreshEmployeeTable();
    }//GEN-LAST:event_loadEmployee

    private void Logout(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Logout
        this.dispose(); // Close the current window
        // Open or show the login frame
        FrmLogin loginFrame = new FrmLogin();
        loginFrame.setVisible(true);
        loginFrame.setLocationRelativeTo(null);
    }//GEN-LAST:event_Logout

    private void eEnterSearch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eEnterSearch
        String searchQuery = txtSearch.getText().trim();
        
        DefaultTableModel model = (DefaultTableModel) tblEmployee.getModel();
        model.setRowCount(0); 
        
        if (searchQuery.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search term.", "Search Input Required", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String sql = "SELECT employeeID, lastName, firstName, birthday, address " +
                     "FROM employee " +
                     "WHERE employeeID = ?";
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron");
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            try {
                int employeeID = Integer.parseInt(searchQuery);
                statement.setInt(1, employeeID);
                
                ResultSet resultSet = statement.executeQuery();
                
                boolean recordFound = false;
                while (resultSet.next()) {
                    Object[] row = new Object[5];
                    row[0] = resultSet.getInt("employeeID");
                    row[1] = resultSet.getString("lastName");
                    row[2] = resultSet.getString("firstName");
                    row[3] = resultSet.getDate("birthday");
                    row[4] = resultSet.getString("address");
                
                    model.addRow(row);
                    recordFound = true;
                }
                
                if (!recordFound) {
                    JOptionPane.showMessageDialog(this, "No matching record found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                }
            
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid Employee ID.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            }
            
            adjustColumns(tblEmployee);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while searching for employee data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmHRStaffHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eEnterSearch

    private void eRefreshRecord(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eRefreshRecord
        refreshEmployeeTable();
        txtSearch.setText("");
    }//GEN-LAST:event_eRefreshRecord

    private void eDeleteRecord(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eDeleteRecord
        if (tblEmployee.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please choose an employee from the table first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String empID = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 0).toString();
        int employeeID = Integer.parseInt(empID);
        
        String lastName = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 1).toString();
        String firstName = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 2).toString();
        String birthday = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 3).toString();
        String address = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 4).toString();
        
        FrmDeleteEmployee delete = new FrmDeleteEmployee(employeeID, lastName, firstName, birthday, address);
        delete.pack();
        delete.setLocationRelativeTo(null);
        delete.setVisible(true);
        
        if (!delete.isVisible()) {
            refreshEmployeeTable();
        }
    }//GEN-LAST:event_eDeleteRecord

    private void eUpdateRecord(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eUpdateRecord
        if (tblEmployee.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please choose an employee from the table first.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        String empID = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 0).toString();
        int employeeID = Integer.parseInt(empID);
        
        String phoneNumber = "";
        String status = "";
        String position = "";
        String supervisor = "";
        
        String lastName = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 1).toString();
        String firstName = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 2).toString();
        String birthday = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 3).toString();
        String address = tblEmployee.getModel().getValueAt(tblEmployee.getSelectedRow(), 4).toString();
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT phoneNumber, status, positionID, immediateSupervisor "
                       + "FROM employee "
                       + "WHERE employeeID = ?";
            
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setInt(1, employeeID);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    phoneNumber = resultSet.getString("phoneNumber");
                    status = resultSet.getString("status");
                    int positionID = resultSet.getInt("positionID");
                    position = getPositionName(positionID);
                    supervisor = resultSet.getString("immediateSupervisor");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error fetching employee details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        FrmUpdateEmployee update = new FrmUpdateEmployee(employeeID, lastName, firstName, birthday, address, phoneNumber, status, position, supervisor);
        update.pack();
        update.setLocationRelativeTo(null);
        update.setVisible(true);
        
        if (!update.isVisible()) {
            refreshEmployeeTable();
        }
    }//GEN-LAST:event_eUpdateRecord

    private void eAddRecord(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eAddRecord
        FrmAddEmployee add = new FrmAddEmployee();
        add.pack();
        add.setLocationRelativeTo(null);
        add.setVisible(true);
        
        add.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                refreshEmployeeTable();
            }
        });
    }//GEN-LAST:event_eAddRecord

    private void loadLeave(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loadLeave
        refreshLeaveTable();
    }//GEN-LAST:event_loadLeave

    private void loadCredits(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loadCredits
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT employeeID, fullName, sickLeave, vacationLeave, emergencyLeave "
                       + "FROM leave_balances";
            
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                ResultSet resultSet = statement.executeQuery();
                
                DefaultTableModel leaveModel = new DefaultTableModel();
                String[] columns = {"Employee ID", "Full Name", "Sick Leave", "Vacation Leave", "Emergency Leave"};
                leaveModel.setColumnIdentifiers(columns);
                
                while (resultSet.next()) {
                    Object[] row = new Object[columns.length];
                    row[0] = resultSet.getInt("employeeID");
                    row[1] = resultSet.getString("fullName");
                    row[2] = resultSet.getInt("sickLeave");
                    row[3] = resultSet.getInt("vacationLeave");
                    row[4] = resultSet.getInt("emergencyLeave");
                    
                    leaveModel.addRow(row);
                }
                
                tblCredit.setModel(leaveModel);
                adjustColumns(tblCredit);
                
            } 
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while fetching leave records.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmHRStaffHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadCredits

    private void rApproveRequest(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rApproveRequest
        if (tblLeave.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a request from the table first.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        int selectedRow = tblLeave.getSelectedRow();
        
        String rqstID = tblLeave.getModel().getValueAt(selectedRow, 0).toString();
        int requestID = Integer.parseInt(rqstID);
        
        String dateRequested = tblLeave.getModel().getValueAt(selectedRow, 1).toString();
        String fullName = tblLeave.getModel().getValueAt(selectedRow, 2).toString();
        String leaveType = tblLeave.getModel().getValueAt(selectedRow, 3).toString();
        String days = tblLeave.getModel().getValueAt(selectedRow, 4).toString();
        String startDate = tblLeave.getModel().getValueAt(selectedRow, 5).toString();
        String endDate = tblLeave.getModel().getValueAt(selectedRow, 6).toString();
        String status = tblLeave.getModel().getValueAt(selectedRow, 7).toString();
        
        String reason = "";
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT reason "
                       + "FROM request "
                       + "WHERE requestID = ?";
            
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setInt(1, requestID);
                ResultSet resultSet = statement.executeQuery();
                
                if (resultSet.next()) {
                    reason = resultSet.getString("reason");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error fetching employee details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        FrmApprove approve = new FrmApprove(requestID, dateRequested, fullName, leaveType, days, startDate, endDate, status, reason);
        approve.pack();
        approve.setLocationRelativeTo(null);
        approve.setVisible(true);
        
        if (!approve.isVisible()) {
            refreshLeaveTable();
        }
    }//GEN-LAST:event_rApproveRequest

    private void rRejectRequest(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rRejectRequest
        if (tblLeave.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a request from the table first.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        int selectedRow = tblLeave.getSelectedRow();
        
        String rqstID = tblLeave.getModel().getValueAt(selectedRow, 0).toString();
        int requestID = Integer.parseInt(rqstID);
        
        String dateRequested = tblLeave.getModel().getValueAt(selectedRow, 1).toString();
        String fullName = tblLeave.getModel().getValueAt(selectedRow, 2).toString();
        String leaveType = tblLeave.getModel().getValueAt(selectedRow, 3).toString();
        String days = tblLeave.getModel().getValueAt(selectedRow, 4).toString();
        String startDate = tblLeave.getModel().getValueAt(selectedRow, 5).toString();
        String endDate = tblLeave.getModel().getValueAt(selectedRow, 6).toString();
        String status = tblLeave.getModel().getValueAt(selectedRow, 7).toString();
        
        String reason = "";
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT reason "
                       + "FROM request "
                       + "WHERE requestID = ?";
            
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setInt(1, requestID);
                ResultSet resultSet = statement.executeQuery();
                
                if (resultSet.next()) {
                    reason = resultSet.getString("reason");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error fetching employee details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        FrmReject reject = new FrmReject(requestID, dateRequested, fullName, leaveType, days, startDate, endDate, status, reason);
        reject.pack();
        reject.setLocationRelativeTo(null);
        reject.setVisible(true);
        
        if (!reject.isVisible()) {
            refreshLeaveTable();
        }
    }//GEN-LAST:event_rRejectRequest

    private void rRefreshRequest(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rRefreshRequest
        refreshLeaveTable();
    }//GEN-LAST:event_rRefreshRequest

    private void loadAttendance(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loadAttendance
        refreshAttendanceTable();
    }//GEN-LAST:event_loadAttendance

    private void monthlyReportGenerate(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthlyReportGenerate
        String selectedEmployee = (String) cbREmployee.getSelectedItem();
        String start = String.valueOf(cbRStartDate.getSelectedItem());
        String end = String.valueOf(cbREndDate.getSelectedItem());

        int employeeID = selectedEmployee.equals("All employees") ? -1 : Integer.parseInt(selectedEmployee.split(" ")[0]);
        java.sql.Date startDate = java.sql.Date.valueOf(start);
        java.sql.Date endDate = java.sql.Date.valueOf(end);

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql;

            if (employeeID == -1) {
                sql = "SELECT `Employee No`, `Employee Full Name`, `Position`, `Department`, `Gross Income`, `Net Pay` " +
                "FROM monthly_payroll_summary " +
                "WHERE `Period Start Date` >= ? AND `Period End Date` <= ? " +
                "ORDER BY `Employee No`";
            } else {
                sql = "SELECT `Employee No`, `Employee Full Name`, `Position`, `Department`, `Gross Income`, `Net Pay` " +
                "FROM monthly_payroll_summary " +
                "WHERE `Employee No` = ? AND `Period Start Date` >= ? AND `Period End Date` <= ? " +
                "ORDER BY `Employee No`";
            }

            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                if (employeeID != -1) {DefaultTableModel reportModel = new DefaultTableModel();
                    statement.setInt(1, employeeID);
                    statement.setDate(2, startDate);
                    statement.setDate(3, endDate);
                } else {
                    statement.setDate(1, startDate);
                    statement.setDate(2, endDate);
                }

                ResultSet resultSet = statement.executeQuery();
                DefaultTableModel reportModel = new DefaultTableModel();

                String[] columns = {"ID", "Employee Full Name", "Position",
                    "Department", "Gross Income", "Net Pay"};

                reportModel.setColumnIdentifiers(columns);
                boolean dataAvailable = false;

                while (resultSet.next()) {
                    dataAvailable = true;
                    Object[] row = new Object[columns.length];
                    row[0] = resultSet.getInt("Employee No");
                    row[1] = resultSet.getString("Employee Full Name");
                    row[2] = resultSet.getString("Position");
                    row[3] = resultSet.getString("Department");
                    row[4] = resultSet.getDouble("Gross Income");
                    row[5] = resultSet.getDouble("Net Pay");

                    reportModel.addRow(row);
                }

                if (dataAvailable) {
                    tblReport.setModel(reportModel);
                    adjustColumns(tblReport);
                } else {
                    JOptionPane.showMessageDialog(this, "Payslip for the selected month is not available.", "No Data", JOptionPane.INFORMATION_MESSAGE);

                    reportModel.setRowCount(0);
                    tblReport.setModel(reportModel);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while fetching report data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_monthlyReportGenerate

    private void monthlyReportPrint(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthlyReportPrint
        if (cbRStartDate.getSelectedItem() == null || cbREndDate.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please select start and end dates first.", "Missing Dates", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
                String reportpath = "C:\\Users\\Anna\\Downloads\\Reports\\Monthly_Payroll_Summary.jrxml";
                JasperReport jasperReport = JasperCompileManager.compileReport(reportpath);

                Map<String, Object> parameters = new HashMap<>();

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date startDate = dateFormat.parse(String.valueOf(cbRStartDate.getSelectedItem()));
                Date endDate = dateFormat.parse(String.valueOf(cbREndDate.getSelectedItem()));

                java.sql.Date sqlStartDate = new java.sql.Date(startDate.getTime());
                java.sql.Date sqlEndDate = new java.sql.Date(endDate.getTime());
                parameters.put("cbStartDate1", sqlStartDate);
                parameters.put("cbEndDate2", sqlEndDate);

                // Debugging
                System.out.println("startDate parameter: " + sqlStartDate);
                System.out.println("endDate parameter: " + sqlEndDate);

                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, connection);
                JasperViewer.viewReport(jasperPrint, false);
            }

        } catch(ClassNotFoundException | NumberFormatException | SQLException | JRException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error generating payslip report: " + e.getMessage());
        }
    }//GEN-LAST:event_monthlyReportPrint

    private void aEnterSearch(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aEnterSearch
        // TODO add your handling code here:
    }//GEN-LAST:event_aEnterSearch

    private void aRefreshAttendance(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aRefreshAttendance
        refreshAttendanceTable();
    }//GEN-LAST:event_aRefreshAttendance

    private void aUpdateAttendance(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aUpdateAttendance
        // TODO add your handling code here:
    }//GEN-LAST:event_aUpdateAttendance

    private void aDeleteAttendance(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aDeleteAttendance
        // TODO add your handling code here:
    }//GEN-LAST:event_aDeleteAttendance

    private void rEnterSearch(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rEnterSearch
        String searchQuery = txtRSearch.getText().trim();
        
        DefaultTableModel model = (DefaultTableModel) tblLeave.getModel();
        model.setRowCount(0); 
        
        if (searchQuery.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search term.", "Search Input Required", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String sql = "SELECT * FROM leave_record " +
                     "WHERE Status = ?";
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron");
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            try {String status = searchQuery.trim();
                statement.setString(1, status);
                
                ResultSet resultSet = statement.executeQuery();
                
                boolean recordFound = false;
                while (resultSet.next()) {
                    Object[] row = new Object[8];
                    row[0] = resultSet.getInt("Request ID");
                    row[1] = resultSet.getDate("Date Requested");
                    row[2] = resultSet.getString("Full Name");
                    row[3] = resultSet.getString("Leave Type");
                    row[4] = resultSet.getInt("Days");
                    row[5] = resultSet.getDate("Start Date");
                    row[6] = resultSet.getDate("End Date");
                    row[7] = resultSet.getString("Status");
                
                    model.addRow(row);
                    recordFound = true;
                }
                
                if (!recordFound) {
                    JOptionPane.showMessageDialog(this, "No matching record found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                }
            
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid Employee ID.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            }
            
            tblLeave.setModel(model);
            adjustColumns(tblLeave);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while searching for employee data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmHRStaffHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rEnterSearch

    // Display current time and date
    public void setTime() {
        Thread updateTimeThread = new Thread(() -> {
            while (true) {
                // Get current time
                Date date = new Date();
                SimpleDateFormat stf = new SimpleDateFormat("h:mm:ss aa");
                SimpleDateFormat sdf = new SimpleDateFormat("EEEE, dd-MM-yyyy");
                String realTime = stf.format(date);
                
                // Update time label
                SwingUtilities.invokeLater(() -> lblTime.setText(realTime));
                lblDate.setText(sdf.format(date));
            }
        });
        updateTimeThread.start();
    }
    
    public void setUser(String enteredUsername) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT username, firstName "
                    + "FROM employee_details "
                    + "WHERE username = ?";
            
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, enteredUsername);
                ResultSet resultSet = statement.executeQuery();
                
                if (resultSet.next()) {
                    String firstName = resultSet.getString("firstName");
                    lblUser.setText(firstName + ",");
                } else {
                    lblUser.setText("Unknown User,");
                }
            }
        } catch (SQLException ex) {
            
        }
    }
    
    private void refreshEmployeeTable() {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT employeeID, lastName, firstName, birthday, address FROM employee";
        
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                ResultSet resultSet = statement.executeQuery();
            
                DefaultTableModel employeeModel = new DefaultTableModel();
                String[] columns = {"Employee ID", "Last Name", "First Name", "Birthday", "Address"};
                employeeModel.setColumnIdentifiers(columns);
            
                while (resultSet.next()) {
                    Object[] row = new Object[columns.length];
                    row[0] = resultSet.getInt("employeeID");
                    row[1] = resultSet.getString("lastName");
                    row[2] = resultSet.getString("firstName");
                    row[3] = resultSet.getDate("birthday");
                    row[4] = resultSet.getString("address");
                
                    employeeModel.addRow(row);
                }
            
                tblEmployee.setModel(employeeModel);
                adjustColumns(tblEmployee); 
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while fetching payroll data.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmHRStaffHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void refreshAttendanceTable() {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT * FROM attendance_record ORDER BY date DESC";
        
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                ResultSet resultSet = statement.executeQuery();
            
                DefaultTableModel employeeModel = new DefaultTableModel();
                String[] columns = {"Employee ID", "Date", "Time In", "Time Out", "Status"};
                employeeModel.setColumnIdentifiers(columns);
            
                while (resultSet.next()) {
                    Object[] row = new Object[columns.length];
                    row[0] = resultSet.getInt("employeeID");
                    row[1] = resultSet.getString("date");
                    row[2] = resultSet.getString("timeIn");
                    row[3] = resultSet.getString("timeOut");
                    row[4] = resultSet.getString("statusName");
                
                    employeeModel.addRow(row);
                }
            
                tblAttendance.setModel(employeeModel);
                adjustColumns(tblAttendance); 
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while fetching payroll data.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmHRStaffHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void refreshLeaveTable() {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aoop_db", "root", "arron")) {
            String sql = "SELECT `Request ID`, `Date Requested`, `Full Name`, `Leave Type`, `Days`, `Start Date`, `End Date`, `Status` "
                       + "FROM leave_record";
        
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                ResultSet resultSet = statement.executeQuery();
                
                DefaultTableModel leaveModel = new DefaultTableModel();
                String[] columns = {"Request ID", "Date Requested", "Full Name", "Leave Type", "Days", "Start Date", "End Date", "Status"};
                leaveModel.setColumnIdentifiers(columns);
                
                while (resultSet.next()) {
                    Object[] row = new Object[columns.length];
                    row[0] = resultSet.getInt("Request ID");
                    row[1] = resultSet.getDate("Date Requested");
                    row[2] = resultSet.getString("Full Name");
                    row[3] = resultSet.getString("Leave Type");
                    row[4] = resultSet.getInt("Days");
                    row[5] = resultSet.getDate("Start Date");
                    row[6] = resultSet.getDate("End Date");
                    row[7] = resultSet.getString("Status");
                
                    leaveModel.addRow(row);
                }
            
                tblLeave.setModel(leaveModel);
                adjustColumns(tblLeave); 
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error refreshing leave table:" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmHRStaffHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void adjustColumns(JTable table) {
        TableColumnModel columnModel = table.getColumnModel();
        JTableHeader header = table.getTableHeader();
        int margin = 10;
        
        for (int column = 0; column < table.getColumnCount(); column++) {
            int maxWidth = 0;
            
            TableColumn tableColumn = columnModel.getColumn(column);
            TableCellRenderer headerRenderer = header.getDefaultRenderer();
            Component headerComp = headerRenderer.getTableCellRendererComponent(table, tableColumn.getHeaderValue(), false, false, -1, column);
            maxWidth = Math.max(headerComp.getPreferredSize().width + margin, maxWidth);
            
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            tableColumn.setCellRenderer(centerRenderer);
            
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component comp = cellRenderer.getTableCellRendererComponent(table, table.getValueAt(row, column), false, false, row, column);
                maxWidth = Math.max(comp.getPreferredSize().width, maxWidth);
            }
            
            int preferredWidth = Math.min(maxWidth, 300);
            tableColumn.setPreferredWidth(preferredWidth);
        }
    }  
    
    private String getPositionName(int positionID) {
        switch (positionID) {
            case 301: return "Chief Executive Officer";
            case 302: return "Chief Operating Officer";
            case 303: return "Chief Finance Officer";
            case 304: return "Chief Marketing Officer";
            case 305: return "IT Operations and Systems";
            case 306: return "HR Manager";
            case 307: return "HR Team Leader";
            case 308: return "HR Rank and File";
            case 309: return "Accounting Head";
            case 310: return "Payroll Manager";
            case 311: return "Payroll Team Leader";
            case 312: return "Payroll Rank and File";
            case 313: return "Account Manager";
            case 314: return "Account Team Leader";
            case 315: return "Account Rank and File";
            case 316: return "Sales & Marketing";
            case 317: return "Supply Chain and Logistics";
            case 318: return "Customer Service and Relations";
            
            default: return "Unknown Position";
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmHRStaffHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmHRStaffHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmHRStaffHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmHRStaffHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmHRStaffHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane JTabbedPane;
    private javax.swing.JButton btnADelete;
    private javax.swing.JButton btnARefresh;
    private javax.swing.JButton btnAUpdate;
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnDeleteEmployee;
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnEnter2;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnRRefresh;
    private javax.swing.JButton btnRSearch;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReject;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdateEmployee;
    private javax.swing.JComboBox<String> cbREmployee;
    private javax.swing.JComboBox<String> cbREndDate;
    private javax.swing.JComboBox<String> cbRStartDate;
    private javax.swing.JComboBox<String> cbSelectDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JLabel lblTitle4;
    private javax.swing.JLabel lblTitle6;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTable tblAttendance;
    private javax.swing.JTable tblCredit;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTable tblLeave;
    private javax.swing.JTable tblReport;
    private javax.swing.JLabel txtREmployee;
    private javax.swing.JLabel txtREndDate;
    private javax.swing.JTextField txtRSearch;
    private javax.swing.JLabel txtRStartDate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearch2;
    // End of variables declaration//GEN-END:variables
}
